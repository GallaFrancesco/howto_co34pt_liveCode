import React from 'react';
import { StaticQuery, Link, graphql } from 'gatsby';
import {
  Accordion,
  AccordionItem,
  AccordionItemTitle,
  AccordionItemBody,
} from 'react-accessible-accordion';
import './SidebarList.css';
import 'react-accessible-accordion/dist/minimal-example.css';
import sectionNames from './SidebarNames';

const findMaxReducer = (accumulator, currentValue) => currentValue < accumulator ? accumulator : currentValue

const SidebarList = ({ data }) => (

  <StaticQuery
    query={graphql`
      query {
        allMarkdownRemark(
          limit: 100
          sort: {fields: [frontmatter___section, frontmatter___subsection], order: ASC}
          filter: {
            frontmatter: {section: {ne: 0}}
          }
        ) {
          edges {
            node {
              frontmatter {
                title
                path
                section
                subsection
              }
            }
          }
        }
      }
      `
    }
    render={data => (
      <div className="sidebarContents">
        <h4> Contents </h4>
          <Accordion>
          {
          /*So we neeed to do this a total of 6 times*/
          /*an empty array that we will use to space out titles, this is generated by getting the last post on the graphql query which will inevitably by the last section*/
          /*we will perform forEach on this array to get it to spit out accordions*/
         // console.log(data.allMarkdownRemark.edges[data.allMarkdownRemark.edges.length-1].node.frontmatter.section)

         //Creates an array from the final section and fills it with `undefined` so that it can be used.
         Array.from(Array(data.allMarkdownRemark.edges[data.allMarkdownRemark.edges.length-1].node.frontmatter.section)).map((placeholder, sectionNumber) => {
           return(
             <AccordionItem>
              <AccordionItemTitle>
                <strong>{sectionNames[sectionNumber]}</strong>
              </AccordionItemTitle>
              <AccordionItemBody>
              {
                /* For each section, print links to the results */
                data.allMarkdownRemark.edges.map((data,index) => {
                  if (data.node.frontmatter.section === sectionNumber + 1) {
                    return(
                      <div>
                      <Link to={data.node.frontmatter.path}>
                      {data.node.frontmatter.section}.{data.node.frontmatter.subsection} - {data.node.frontmatter.title}
                      </Link>
                      </div>
                    )
                  }
                  else {
                    return null
                  }
                })
              }
              </AccordionItemBody>
             </AccordionItem>
           )
         }
         )
        }
        </Accordion>
        {/*
        {
        data.allMarkdownRemark.edges.map((data, index) => {
          //See if we need a section title, if not, return null
          let title;
          if (data.node.frontmatter.subsection === 1) {
            title=<strong>{sectionNames[data.node.frontmatter.section-1]}</strong>
          } else {
            title = null
          }
          return(
            <div>
            {
            //return the title (if needed), and any page information
            }
            {title}
            <li key={index}><Link to={data.node.frontmatter.path}>{data.node.frontmatter.section}.{data.node.frontmatter.subsection} - {data.node.frontmatter.title} </Link></li>
            </div>
          )
        })
        }
        */}
      </div>
    )}
    />
)

export default SidebarList
